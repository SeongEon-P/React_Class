{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\work\\\\src\\\\chapter12-1\\\\Calculator.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport BoilingVerdict from \"./BoilingVerdict\";\nimport TemperatureInput from \"./TemperatureInput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction toCelsius(fahrenheit) {\n  return (fahrenheit - 32) * 5 / 9;\n}\nfunction toFahrenheit(celsius) {\n  return celsius * 9 / 5 + 32;\n}\nfunction tryConvert(temperature, convert) {\n  const input = parseFloat(temperature);\n  if (Number.isNaN(input)) {\n    return \"\";\n  }\n  const output = convert(input);\n  const rounded = Math.round(output * 1000) / 1000;\n  return rounded.toString();\n}\nfunction Calculator(props) {\n  _s();\n  const [temperature, setTemperature] = useState('');\n  const [scale, setScale] = useState(\"c\");\n  const handleCelsiusChange = temperature => {\n    setTemperature(temperature);\n    setScale(\"c\");\n  };\n  const handleFahrenheitChange = temperature => {\n    setTemperature(temperature);\n    setScale(\"f\");\n  };\n  const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;\n  const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TemperatureInput, {\n      scale: \"c\",\n      temperature: celsius,\n      onTemperatureChange: handleCelsiusChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TemperatureInput, {\n      scale: \"f\",\n      temperature: fahrenheit,\n      onTemperatureChange: handleFahrenheitChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(BoilingVerdict, {\n      celsius: parseFloat(celsius)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this)\n\n  // <fieldset>\n  //     <legend>섭씨 온도를 입력하세요:</legend>\n  //     <input value={props.temperature} onChange={handleChange} />\n  //     <BoilingVerdict celsius={parseFloat(temperature)}/>\n  // </fieldset>\n  ;\n}\n_s(Calculator, \"98DKWnhAVzW3K7NiCNT5hiHcd08=\");\n_c = Calculator;\nexport default Calculator;\nvar _c;\n$RefreshReg$(_c, \"Calculator\");","map":{"version":3,"names":["React","useState","BoilingVerdict","TemperatureInput","jsxDEV","_jsxDEV","toCelsius","fahrenheit","toFahrenheit","celsius","tryConvert","temperature","convert","input","parseFloat","Number","isNaN","output","rounded","Math","round","toString","Calculator","props","_s","setTemperature","scale","setScale","handleCelsiusChange","handleFahrenheitChange","children","onTemperatureChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/React/work/src/chapter12-1/Calculator.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport BoilingVerdict from \"./BoilingVerdict\";\nimport TemperatureInput from \"./TemperatureInput\";\n\nfunction toCelsius(fahrenheit){\n    return ((fahrenheit -32)*5)/9;\n}\nfunction toFahrenheit(celsius){\n    return (celsius*9)/5 +32\n}\n\nfunction tryConvert(temperature, convert){\n    const input=parseFloat(temperature);\n    if(Number.isNaN(input)){\n        return \"\";\n    }\n    const output=convert(input);\n    const rounded=Math.round(output * 1000) /1000;\n    return rounded.toString();\n}\n\nfunction Calculator(props){\n    const [temperature, setTemperature]=useState('');\n    const [scale, setScale]=useState(\"c\");\n\n    const handleCelsiusChange=(temperature) => {\n        setTemperature(temperature);\n        setScale(\"c\");\n    };\n    const handleFahrenheitChange=(temperature) => {\n        setTemperature(temperature);\n        setScale(\"f\");\n    };\n\n    const celsius=scale==='f'? tryConvert(temperature, toCelsius) : temperature;\n    const fahrenheit= scale ==='c'? tryConvert(temperature, toFahrenheit) : temperature;\n    return(\n        <div>\n            <TemperatureInput scale=\"c\" temperature={celsius} onTemperatureChange={handleCelsiusChange}/>\n            <TemperatureInput scale=\"f\" temperature={fahrenheit} onTemperatureChange={handleFahrenheitChange}/>\n            <BoilingVerdict celsius={parseFloat(celsius)}/>\n        </div>\n       \n        // <fieldset>\n        //     <legend>섭씨 온도를 입력하세요:</legend>\n        //     <input value={props.temperature} onChange={handleChange} />\n        //     <BoilingVerdict celsius={parseFloat(temperature)}/>\n        // </fieldset>\n    )\n}\nexport default Calculator;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,gBAAgB,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,SAASA,CAACC,UAAU,EAAC;EAC1B,OAAQ,CAACA,UAAU,GAAE,EAAE,IAAE,CAAC,GAAE,CAAC;AACjC;AACA,SAASC,YAAYA,CAACC,OAAO,EAAC;EAC1B,OAAQA,OAAO,GAAC,CAAC,GAAE,CAAC,GAAE,EAAE;AAC5B;AAEA,SAASC,UAAUA,CAACC,WAAW,EAAEC,OAAO,EAAC;EACrC,MAAMC,KAAK,GAACC,UAAU,CAACH,WAAW,CAAC;EACnC,IAAGI,MAAM,CAACC,KAAK,CAACH,KAAK,CAAC,EAAC;IACnB,OAAO,EAAE;EACb;EACA,MAAMI,MAAM,GAACL,OAAO,CAACC,KAAK,CAAC;EAC3B,MAAMK,OAAO,GAACC,IAAI,CAACC,KAAK,CAACH,MAAM,GAAG,IAAI,CAAC,GAAE,IAAI;EAC7C,OAAOC,OAAO,CAACG,QAAQ,CAAC,CAAC;AAC7B;AAEA,SAASC,UAAUA,CAACC,KAAK,EAAC;EAAAC,EAAA;EACtB,MAAM,CAACb,WAAW,EAAEc,cAAc,CAAC,GAACxB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACyB,KAAK,EAAEC,QAAQ,CAAC,GAAC1B,QAAQ,CAAC,GAAG,CAAC;EAErC,MAAM2B,mBAAmB,GAAEjB,WAAW,IAAK;IACvCc,cAAc,CAACd,WAAW,CAAC;IAC3BgB,QAAQ,CAAC,GAAG,CAAC;EACjB,CAAC;EACD,MAAME,sBAAsB,GAAElB,WAAW,IAAK;IAC1Cc,cAAc,CAACd,WAAW,CAAC;IAC3BgB,QAAQ,CAAC,GAAG,CAAC;EACjB,CAAC;EAED,MAAMlB,OAAO,GAACiB,KAAK,KAAG,GAAG,GAAEhB,UAAU,CAACC,WAAW,EAAEL,SAAS,CAAC,GAAGK,WAAW;EAC3E,MAAMJ,UAAU,GAAEmB,KAAK,KAAI,GAAG,GAAEhB,UAAU,CAACC,WAAW,EAAEH,YAAY,CAAC,GAAGG,WAAW;EACnF,oBACIN,OAAA;IAAAyB,QAAA,gBACIzB,OAAA,CAACF,gBAAgB;MAACuB,KAAK,EAAC,GAAG;MAACf,WAAW,EAAEF,OAAQ;MAACsB,mBAAmB,EAAEH;IAAoB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAC7F9B,OAAA,CAACF,gBAAgB;MAACuB,KAAK,EAAC,GAAG;MAACf,WAAW,EAAEJ,UAAW;MAACwB,mBAAmB,EAAEF;IAAuB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACnG9B,OAAA,CAACH,cAAc;MAACO,OAAO,EAAEK,UAAU,CAACL,OAAO;IAAE;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9C;;EAEL;EACA;EACA;EACA;EACA;EAAA;AAER;AAACX,EAAA,CA5BQF,UAAU;AAAAc,EAAA,GAAVd,UAAU;AA6BnB,eAAeA,UAAU;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}